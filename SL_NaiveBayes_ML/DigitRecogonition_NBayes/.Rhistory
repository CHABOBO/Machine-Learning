install.packages("car"); install.packages("QuantPsyc")
library(boot); library(car); library(QuantPsyc)
library(Rcmdr)
library("Rcmdr")
install.packages("Rcmdr")
install.packages("sentimentr")
install.packages("quanteda")
library(quanteda)
uk2010immigCorpus <- corpus(data_char_ukimmig2010,docvars = data.frame(party = names(data_char_ukimmig2010)),
metacorpus = list(notes = "Immigration-related sections of 2010 UK party manifestos"))
summary(uk2010immigCorpus)
library(arules)
library(arulesViz)
data(AdultUCI)
summary(AdultUCI)
AdultUCI <- AdultUCI[,-c(3,5)]
summary(AdultUCI)
AdultUCI[[ "age"]] <- ordered(cut(AdultUCI[[ "age"]], c(15,25,45,65,100)), + labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI[[ "hours-per-week"]] <- ordered(cut(AdultUCI[[ "hours-per-week"]], + c(0,25,40,60,168)), + labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI[[ "capital-gain"]] <- ordered(cut(AdultUCI[[ "capital-gain"]], + c(-Inf,0,median(AdultUCI[[ "capital-gain"]][AdultUCI[[ "capital-gain"]]>0]),Inf)), + labels = c("None", "Low", "High"))
AdultUCI[[ "capital-loss"]] <- ordered(cut(AdultUCI[[ "capital-loss"]], + c(-Inf,0, + median(AdultUCI[[ "capital-loss"]][AdultUCI[[ "capital-loss"]]>0]),Inf)), + labels = c("none", "low", "high"))
AdultUCI[[ "age"]] <- ordered(cut(AdultUCI[[ "age"]], c(15,25,45,65,100)), labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI[[ "hours-per-week"]] <- ordered(cut(AdultUCI[[ "hours-per-week"]], + c(0,25,40,60,168)), labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI[[ "capital-gain"]] <- ordered(cut(AdultUCI[[ "capital-gain"]], c(-Inf,0,median(AdultUCI[[ "capital-gain"]][AdultUCI[[ "capital-gain"]]>0]),Inf)), labels = c("None", "Low", "High"))
AdultUCI[[ "capital-loss"]] <- ordered(cut(AdultUCI[[ "capital-loss"]], c(-Inf,0, median(AdultUCI[[ "capital-loss"]][AdultUCI[[ "capital-loss"]]>0]),Inf)), labels = c("none", "low", "high"))
View(AdultUCI)
summary(AdultUCI)
View(AdultUCI)
summary(AdultUCI)
rules <- apriori(AdultUCI, parameter = list(supp=0.1, conf=0.6, minlen=2), appearance = list(rhs=c("income=large","income=small"),default="lhs"))
summary(rules)
inspect(rules)
inspect(head(rules, by = "lift"))
inspect(head(rules, by = "lift"))
inspect(rules)
inspect(rules)
rules2.sort<-sort(rules,by="lift")
summary(rules2.sort)
rules2.sort
inspect(rules2.sort)
subset.matrix<-is.subset(rules2.sort,rules2.sort)
subset.matrix
redudant<-colSums(subset.matrix)>=1
redudant
rules2.pruned<-rules2.sort[!redudant]
rules2.pruned
rules2.pruned
subset.matrix<-is.subset(rules2.sort,rules2.sort)
redudant<-colSums(subset.matrix)>=1
rules2.pruned<-rules2.sort[!redudant]
rules2.pruned
unique_rules <- rules[is.redundant(rules, measure = "confidence")]
summary(unique_rules)
rules.sorted <- sort(unique_rules, decreasing = F, by = "lift")
inspect(rules.sorted)
rules.sorted <- sort(unique_rules, decreasing = T, by = "lift")
inspect(rules.sorted)
rules.sorted<-sort(unique_rules,by="lift")
inspect(rules.sorted)
summary(rules.sorted)
inspect(rules.sorted)
install.packages("arulesViz")
library(arulesViz)
plot(rules.sorted, method = "scatterplot", measure = "support")
library(arules)
library(arulesViz)
data(AdultUCI)
dultUCI <- AdultUCI[,-c(3,5)]
AdultUCI[[ "age"]] <- ordered(cut(AdultUCI[[ "age"]], c(15,25,45,65,100)), labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI[[ "hours-per-week"]] <- ordered(cut(AdultUCI[[ "hours-per-week"]], + c(0,25,40,60,168)), labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI[[ "capital-gain"]] <- ordered(cut(AdultUCI[[ "capital-gain"]], c(-Inf,0,median(AdultUCI[[ "capital-gain"]][AdultUCI[[ "capital-gain"]]>0]),Inf)), labels = c("None", "Low", "High"))
AdultUCI[[ "capital-loss"]] <- ordered(cut(AdultUCI[[ "capital-loss"]], c(-Inf,0, median(AdultUCI[[ "capital-loss"]][AdultUCI[[ "capital-loss"]]>0]),Inf)), labels = c("none", "low", "high"))
library(arules)
library(arulesViz)
data(AdultUCI)
summary(AdultUCI)
AdultUCI <- AdultUCI[,-c(3,5)]
AdultUCI[[ "age"]] <- ordered(cut(AdultUCI[[ "age"]], c(15,25,45,65,100)), labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI[[ "hours-per-week"]] <- ordered(cut(AdultUCI[[ "hours-per-week"]], + c(0,25,40,60,168)), labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI[[ "capital-gain"]] <- ordered(cut(AdultUCI[[ "capital-gain"]], c(-Inf,0,median(AdultUCI[[ "capital-gain"]][AdultUCI[[ "capital-gain"]]>0]),Inf)), labels = c("None", "Low", "High"))
AdultUCI[[ "capital-loss"]] <- ordered(cut(AdultUCI[[ "capital-loss"]], c(-Inf,0, median(AdultUCI[[ "capital-loss"]][AdultUCI[[ "capital-loss"]]>0]),Inf)), labels = c("none", "low", "high"))
rules <- apriori(AdultUCI, parameter = list(supp=0.1, conf=0.6, minlen=2), appearance = list(rhs=c("income=large","income=small"),default="lhs"))
inspect(rules)
rules.sorted <-sort(income_rules,by="lift")
inspect(rules.sorted)
rules.sorted <-sort(rules,by="lift")
inspect(rules.sorted)
subset.matrix<-is.subset(rules.sorted,rules.sorted)
subset.matrix[lower.tri(subset.matrix,diag=T)]<-0
subset.matrix
subset.matrix
redudant<-colSums(subset.matrix)>=1
redudant<-colSums(subset.matrix)>=1
redudant
rules.pruned<-rules.sorted[!redudant]
inspect(rules.pruned)
library(arulesViz)
plot(rules.pruned)
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="paracoord",control=list(reorder=TRUE))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
plot(rules.pruned,method="graph",control=list(type="items"))
setwd("C:/Users/febin/Desktop/SL_NaiveBayes_ML/Amazon_NBayes")
library(lattice)
library(ggplot2)
library(naivebayes)
library(caret)
train_data = read.csv(file="sentiment_train.csv",header = TRUE)
train_data$rating = as.factor(train_data$rating)
test_data = read.csv(file="sentiment_test.csv",header = TRUE)
test_data$rating = as.factor(test_data$rating)
model <- naive_bayes(rating~negative_score+positive_score+neutral_score+compound_value, data = train_data,
laplace = 5, usekernel = F, prior = NULL)
pred <- predict(model, test_data, type = "class", threshold = 0.0001, eps = 0.00000000000000000000001)
mean(pred == test_data$rating)*100
confusionMatrix(pred, test_data$rating)
setwd("C:/Users/febin/Desktop/SL_NaiveBayes_ML/DigitRecogonition_NBayes")
rain_data <- read.csv("optdigits_raining.csv", header = FALSE)
train_data$V65 <- as.factor(train_data$V65)
test_data <- read.csv("optdigits_test.csv", header = FALSE)
test_data$V65 <- as.factor(test_data$V65)
train_data <- read.csv("optdigits_raining.csv", header = FALSE)
train_data$V65 <- as.factor(train_data$V65)
test_data <- read.csv("optdigits_test.csv", header = FALSE)
test_data$V65 <- as.factor(test_data$V65)
library(naivebayes)
model_nBayes <- naive_bayes(train_data[,-65], train_data[,65], laplace = 5)
table(predict(model_nBayes, test_data[,-65]), test_data[,65])
pred <- predict(model_nBayes, test_data, type = "class")
mean(pred == test_data$V65)*100
maxidx <- function(arr) {
return(  which(arr == max(arr)) )
}
model <- naive_bayes(train_data[,-65], train_data[,65], laplace = 1, usekernel = F, prior = NULL)
pred <- predict(model, test_data, type = "class", threshold = 0.2, eps = 0.00000000000000000000001)
idx <- apply(pred, c(1), maxidx)
mean(idx-1 == test_data$V65)
library(naivebayes)
model_nBayes <- naive_bayes(train_data[,-65], train_data[,65], laplace = 5)
table(predict(model_nBayes, test_data[,-65]), test_data[,65])
pred <- predict(model_nBayes, test_data, type = "class")
mean(pred == test_data$V65)*100
maxidx <- function(arr) {
return(  which(arr == max(arr)) )
}
idx <- apply(pred, c(1), maxidx)
idx <- apply(pred, c(1), maxidx)
maxidx <- function(arr) {
return(  which(arr == max(arr)) )
}
pred <- predict(model, test_data, type = "class", threshold = 0.2, eps = 0.00000000000000000000001)
idx <- apply(pred, c(1), maxidx)
train_data <- read.csv("optdigits_raining.csv", header = FALSE)
train_data$V65 <- as.factor(train_data$V65)
test_data <- read.csv("optdigits_test.csv", header = FALSE)
test_data$V65 <- as.factor(test_data$V65)
library(naivebayes)
model <- naive_bayes(train_data[,-65], train_data[,65], laplace = 1, usekernel = F, prior = NULL)
pred <- predict(model, test_data, type = "class", threshold = 0.2, eps = 0.00000000000000000000001)
idx <- apply(pred, c(1), maxidx)
maxidx <- function(arr) {
return(  which(arr == max(arr)) )
}
mean(idx-1 == test_data$V65)
idx <- apply(pred, c(1), maxidx)
